Проблемы Реакта 
1. Реакт позиционирует себя как компонентная декларативная библиотека.
Каждый компонент может быть представлен в виде функции которой на вход подаются нек-ые данные,
и в результате на выходе мы получаем нек-ое представление.
2.С чистыми компонентами вроде все более менее понятно, они идеальные блоки вашего приложения:
легко тестируются и легко переиспользуются.
Но есть след. проблемы:
1. Глубокая компоновка компонентов порождает большие цепочки пробрасывания свойств. Особенно это печально
с колбеками.
2. Приложение блин нафиг имеет состояние, к-ое меняется
3. Мало того, что мы имеем изменяемое состояние, то наше приложение еще и является многопоточным приложением.
У нас возникают проблемы синхронизации с состоянием на сервере.

Используя FRP или похожие техники а также монаду State, можно было бы свести наше приложение к конечному автомату,
к-ый бы описывал работу нашего приложения.
Эта техника неплохо бы проявила себя в оффлайн приложениях, но на практике:
а) мы не можем хранить все состояние на клиенте
б) другие пользователи тоже могут его изменять
в) нужно как-то синхронизировать локальные состояния и состояние на сервере

Простое решение - запрашивать состояние с сервера после каждой операции его изменения
Наподобие того как это делается с обычными страницами.

Как хранить все состояние?
Мы должны хранить только его проекции.
При этом информация о том какую проекцию мы храним и прочие детали тоже становятся нашим состоянием.
Для того чтобы не пересылать постоянно состояние можно попробовать использовать алгоритм схожий с алгоритмом неблокирующим чтением, записью регистра.


Store как отдельный компонент
Как насчет нечто похожего на Model из ExtJS.
Т.е. описывается модель, и API.

Вынесения состояния в store позволяет забыть об пересечении состояний между компонентами.
Теперь на одной странице могут находиться много одинаковых компонентов. Т.е. они все еще синхронизированы через store
то они будут находиться в консистентом состоянии.
Вопросы:
1. Что делать с освобождением памяти.
2. Что делать если компонент зависит от нескольких store?
3. Кто из компонентов должен загружать данные в store? 
4. Если store само должно загружать данные, то должны ли они кэшироваться и с какими параметрами они должны загружаться?

Добавляя Flux  и store, мы добавляем доп. зависимость для компонента.
Теперь чтобы переиспользовать container компонент нужно тянуть вместе с ним и все сторе, от к-ых он зависит, а также actions.


....Если все компоненты напрямую работают со store, то это значит, что мы их не сможем далее переиспользовать
Вообще любой statefull компонент практически не получиться переиспользовать (
